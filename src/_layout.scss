@function breakpoint-prefix($name) {
  @if $name != null {
    @return '#{$name}-';
  }
  @else {
    @return '';
  }
}

@function class-list($prefixList, $suffix) {
  $list: null;
  @each $name in $prefixList {
    $currentPrefix: breakpoint-prefix($name);
    $list: append($list, unquote(".cp-c-#{$currentPrefix}#{$suffix}"), comma);
  }
  @return $list;
}

@mixin layout($breakpoint) {
  $prefix: 'cp-c-#{breakpoint-prefix($breakpoint)}';

  .#{$prefix}column,
  .#{$prefix}row {
    box-sizing: border-box;
    display: flex;
  }
  .#{$prefix}column { flex-direction: column; }
  .#{$prefix}row    { flex-direction: row;    }
}

@mixin flex-properties($breakpoint, $breakpoints) {
  $prefix: 'cp-i-#{breakpoint-prefix($breakpoint)}';

  .#{$prefix}flex     { flex: 1 1 0%;   box-sizing: border-box; }
  .#{$prefix}auto     { flex: 1 1 auto; box-sizing: border-box; }
  .#{$prefix}none     { flex: 0 0 auto; box-sizing: border-box; }
  .#{$prefix}noshrink { flex: 1 0 auto; box-sizing: border-box; }
  .#{$prefix}nogrow   { flex: 0 1 auto; box-sizing: border-box; }

  @for $i from 1 through 20 {
    $value : #{$i * 5 + '%'};

    #{class-list($breakpoints, 'row > .#{$prefix}#{$i * 5}')} {
      flex: 1 1 #{$value};
      max-width: #{$value};
      max-height: 100%;
      box-sizing: border-box;
    }

    #{class-list($breakpoints, 'column > .#{$prefix}#{$i * 5}')} {
      flex: 1 1 #{$value};
      max-width: 100%;
      max-height: #{$value};
      box-sizing: border-box;
    }
  }

  #{class-list($breakpoints, 'row')} {
    > .#{$prefix}33 {
      flex: 1 1 33.33%;
      max-width: 33.33%;
      max-height: 100%;
      box-sizing: border-box;
    }
    > .#{$prefix}66 {
      flex: 1 1 66.66%;
      max-width: 66.66%;
      max-height: 100%;
      box-sizing: border-box;
    }
  }

  #{class-list($breakpoints, 'column')} {
    > .#{$prefix}33 {
      flex: 1 1 33.33%;
      max-width: 100%;
      max-height: 33.33%;
      box-sizing: border-box;
    }

    > .#{$prefix}66 {
      flex: 1 1 66.66%;
      max-width: 100%;
      max-height: 66.66%;
      box-sizing: border-box;
    }
  }
}

@mixin layout-align($breakpoint) {
  // Alignment attributes for layout containers' children
  // Arrange on the Main Axis
  // center, start, end, space-between, space-around
  // flex-start is the default for justify-content
  // ------------------------------
  $prefix: 'cp-c-#{breakpoint-prefix($breakpoint)}align';

  .#{$prefix}-start-stretch {
    justify-content : flex-start;
    align-content : stretch;
    align-items: stretch;
  }

  // Main Axis Center
  .#{$prefix}-start-start,
  .#{$prefix}-start-center,
  .#{$prefix}-start-end,
  .#{$prefix}-start-stretch {
    justify-content: flex-start;
  }

  // Main Axis Center
  .#{$prefix}-center-start,
  .#{$prefix}-center-center,
  .#{$prefix}-center-end,
  .#{$prefix}-center-stretch {
    justify-content: center;
  }

  // Main Axis End
  .#{$prefix}-end-start,
  .#{$prefix}-end-center,
  .#{$prefix}-end-end,
  .#{$prefix}-end-stretch
  {
    justify-content: flex-end;
  }

  // Main Axis Space Around
  .#{$prefix}-spacearound-center,
  .#{$prefix}-spacearound-start,
  .#{$prefix}-spacearound-end,
  .#{$prefix}-spacearound-stretch {
    justify-content: space-around;
  }

  // Main Axis Space Between
  .#{$prefix}-spacebetween-center,
  .#{$prefix}-spacebetween-start,
  .#{$prefix}-spacebetween-end,
  .#{$prefix}-spacebetween-stretch {
    justify-content: space-between;
  }


  // Arrange on the Cross Axis
  // center, start, end
  // stretch is the default for align-items
  // ------------------------------

  // Cross Axis Start
  .#{$prefix}-start-start,
  .#{$prefix}-center-start,
  .#{$prefix}-end-start,
  .#{$prefix}-spacebetween-start,
  .#{$prefix}-spacearound-start {
    align-items: flex-start;
    align-content: flex-start;
  }

  // Cross Axis Center
  .#{$prefix}-start-center,
  .#{$prefix}-center-center,
  .#{$prefix}-end-center,
  .#{$prefix}-spacebetween-center,
  .#{$prefix}-spacearound-center {
    align-items: center;
    align-content: center;
    max-width: 100%;
  }

  // Cross Axis Center IE overflow fix
  .#{$prefix}-start-center > *,
  .#{$prefix}-center-center > *,
  .#{$prefix}-end-center > *,
  .#{$prefix}-spacebetween-center > *,
  .#{$prefix}-spacearound-center > * {
    max-width: 100%;
    box-sizing: border-box;
  }

  // Cross Axis End
  .#{$prefix}-start-end,
  .#{$prefix}-center-end,
  .#{$prefix}-end-end,
  .#{$prefix}-spacebetween-end,
  .#{$prefix}-spacearound-end {
    align-items: flex-end;
    align-content: flex-end;
  }

  // Cross Axis Start
  .#{$prefix}-start-stretch,
  .#{$prefix}-center-stretch,
  .#{$prefix}-end-stretch,
  .#{$prefix}-spacebetween-stretch,
  .#{$prefix}-spacearound-stretch {
    align-items: stretch;
    align-content: stretch;
  }
}

@mixin flex-order($breakpoint) {
  $prefix: 'cp-i-#{breakpoint-prefix($breakpoint)}order';

  .#{$prefix}-last {
    order: 99999;
  }

  .#{$prefix}-first {
    order: -1;
  }
}

@mixin layout-padding-margin($breakpoint, $breakpoints) {
  $prefix: 'cp-c-#{breakpoint-prefix($breakpoint)}';

  $step: 0;
  @each $space in (0 .25rem .5rem 1rem 2rem 4rem) {
    #{class-list($breakpoints, 'padding-#{$step} > *')} {
      padding: $space;
    }

    #{class-list($breakpoints, 'padding-h-#{$step} > *')} {
      padding: 0 $space;
    }

    #{class-list($breakpoints, 'padding-v-#{$step} > *')} {
      padding: $space 0;
    }

    #{class-list($breakpoints, 'margin-#{$step} > *')} {
      margin: $space;
    }

    #{class-list($breakpoints, 'margin-h-#{$step} > *')} {
      margin: 0 $space;
    }

    #{class-list($breakpoints, 'margin-v-#{$step} > *')} {
      margin: $space 0;
    }

    $step: $step + 1;
  }
}

@mixin layouts_for_breakpoint($currentBreakpoint, $breakpoints) {
  @include flex-order($currentBreakpoint);
  @include layout-align($currentBreakpoint);
  @include layout-padding-margin($currentBreakpoint, $breakpoints);
  @include flex-properties($currentBreakpoint, $breakpoints);
  @include layout($currentBreakpoint);

  @if $currentBreakpoint == null {
    .cp-c-wrap {
      flex-wrap: wrap;
    }

    .cp-c-nowrap {
        flex-wrap: nowrap;
    }

    .cp-c-fill {
      margin: 0;
      width: 100%;
      min-height: 100%;
      height: 100%;
    }
  }
}
